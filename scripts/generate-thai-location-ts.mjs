#!/usr/bin/env node
// Usage:
// node scripts/generate-thai-location-ts.mjs --source spec --in ./data/spec --out ./src/data/th
// node scripts/generate-thai-location-ts.mjs --source raw  --in ./data/raw  --out ./src/data/th

import fs from "node:fs/promises";
import path from "node:path";

function parseArgs() {
  const args = Object.fromEntries(
    process.argv.slice(2).map((a) => {
      const [k, v = true] = a.startsWith("--") ? a.slice(2).split("=") : [a, true];
      return [k, v];
    })
  );
  if (!args.source || !args.in || !args.out) {
    console.error("Usage: node generate-thai-location-ts.mjs --source spec|raw --in <inputDir> --out <outputDir>");
    process.exit(1);
  }
  if (!["spec", "raw"].includes(args.source)) {
    console.error("--source must be 'spec' or 'raw'");
    process.exit(1);
  }
  return args;
}

function asStr(v) {
  if (v === null || v === undefined) return "";
  return String(v);
}
function asZip(v) {
  const s = asStr(v).trim();
  // pad เป็น 5 หลักถ้าจำเป็น
  return /^\d{5}$/.test(s) ? s : s.replace(/\D/g, "").padStart(5, "0").slice(0, 5);
}

async function readJSON(file) {
  const raw = await fs.readFile(file, "utf8");
  return JSON.parse(raw);
}

function headerTs(interfaces) {
  return `// Auto-generated by generate-thai-location-ts.mjs
// DO NOT EDIT MANUALLY
${interfaces}

`;
}

function toTsModule(name, ifaceName, arr, mapLine) {
  const body = arr.map(mapLine).join(",\n");
  return `export interface ${ifaceName} {
  id: string;
  ${ifaceName === "Amphure" ? "province_id: string;" : ""}
  ${ifaceName === "Tambon" ? "amphure_id: string; zip_code: string;" : ""}
  name_th: string;
  name_en?: string;
}

export const ${name}: ${ifaceName}[] = [
${body}
];
`;
}

function q(v) { return JSON.stringify(v); } // safe stringify (handles quotes/escapes)

async function main() {
  const { source, in: inDir, out: outDir } = parseArgs();

  // ชื่อไฟล์ตามชุด spec/raw
  const files = source === "spec"
    ? { prov: "province.json", amph: "district.json", tamb: "sub_district.json" }
    : { prov: "provinces.json", amph: "districts.json", tamb: "sub_districts.json" };

  // อ่าน JSON
  const prov = await readJSON(path.join(inDir, files.prov));
  const amph = await readJSON(path.join(inDir, files.amph));
  const tamb = await readJSON(path.join(inDir, files.tamb));

  // normalize → strings
  const provinces = prov.map((p) => ({
    id: asStr(p.id),
    name_th: asStr(p.name_th || p.name || p.nameTh),
    name_en: p.name_en ? asStr(p.name_en) : undefined,
  }));

  const amphures = amph.map((d) => ({
    id: asStr(d.id),
    province_id: asStr(d.province_id || d.provinceId),
    name_th: asStr(d.name_th || d.name || d.nameTh),
    name_en: d.name_en ? asStr(d.name_en) : undefined,
  }));

  const tambons = tamb.map((t) => ({
    id: asStr(t.id),
    amphure_id: asStr(t.amphure_id || t.district_id || t.amphur_id || t.amphureId),
    zip_code: asZip(t.zip_code || t.zipCode || t.postcode),
    name_th: asStr(t.name_th || t.name || t.nameTh),
    name_en: t.name_en ? asStr(t.name_en) : undefined,
  }));

  // สร้างโฟลเดอร์ปลายทาง
  await fs.mkdir(outDir, { recursive: true });

  // สร้างไฟล์ provinces.ts
  const provincesTs =
    headerTs(`export interface Province { id: string; name_th: string; name_en?: string }`) +
    toTsModule(
      "provinces",
      "Province",
      provinces,
      (p) => `  { id: ${q(p.id)}, name_th: ${q(p.name_th)}${p.name_en ? `, name_en: ${q(p.name_en)}` : ""} }`
    );
  await fs.writeFile(path.join(outDir, "provinces.ts"), provincesTs, "utf8");

  // สร้างไฟล์ amphures.ts
  const amphuresTs =
    headerTs(`export interface Amphure { id: string; province_id: string; name_th: string; name_en?: string }`) +
    toTsModule(
      "amphures",
      "Amphure",
      amphures,
      (a) => `  { id: ${q(a.id)}, province_id: ${q(a.province_id)}, name_th: ${q(a.name_th)}${a.name_en ? `, name_en: ${q(a.name_en)}` : ""} }`
    );
  await fs.writeFile(path.join(outDir, "amphures.ts"), amphuresTs, "utf8");

  // สร้างไฟล์ tambons.ts
  const tambonsTs =
    headerTs(`export interface Tambon { id: string; amphure_id: string; zip_code: string; name_th: string; name_en?: string }`) +
    toTsModule(
      "tambons",
      "Tambon",
      tambons,
      (t) => `  { id: ${q(t.id)}, amphure_id: ${q(t.amphure_id)}, zip_code: ${q(t.zip_code)}, name_th: ${q(t.name_th)}${t.name_en ? `, name_en: ${q(t.name_en)}` : ""} }`
    );
  await fs.writeFile(path.join(outDir, "tambons.ts"), tambonsTs, "utf8");

  console.log(`✅ Generated:
- ${path.join(outDir, "provinces.ts")}
- ${path.join(outDir, "amphures.ts")}
- ${path.join(outDir, "tambons.ts")}`);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
